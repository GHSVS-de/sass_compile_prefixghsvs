### Output of `npm run g-help` (path variables not translated)
#### What?
- A half-assed, scrawly package for domestic use that compiles, minifies, autoprefixes *.scss files to CSS and creates source-maps.
- Can also upload the files via FTP.
- Multiple projects/websites can be configured in 1 repository. But only 1 at the same time can be processed!
- No luxury. You need to know what you're doing.

#### Tested?
- Only with WSL (Windows Subsystem for Linux / DEBIAN) + PHP 7.3 + Node + NPM on local machine.

#### Be aware
- These npm scripts are very ungraceful. Always have a look on your console messages if the previous job is finished before you fire a new command.
- The very first usage of `npm run [SCRIPTKEY]` in a console session is always slow. At least with WSL.
- Be not so stupid to use it in a productive environment without tests.

#### How to configure
- Create a project folder like `myProject/` inside main dir of repository.
- Create and configure a file `package.json` inside project folder. See file `package-example_project.json`.
- Optional: Create and configure a file `ftp-credentials.json` inside project folder. See file `ftp-credentials-example.json`.- Run `node prepareProject.js myProject` and confirm to override the **main** `package.json`. Afterwards it's changed and configured for the project `myProject`. These keys are adapted:
```
	"versionTxt" (just a datetime stamp)
	"DIR" > "scss"
	"DIR" > "target"
	"DIR" > "project"
	"DIR" > "projectName"
	```

#### How to start a script
- `npm run [SCRIPTKEY]`

#### The `DIR` block (inside **main** `package.json`):
- Normally you don't have to change it yourself if you use `prepareProject.js [PROCECTFOLDER]` before first `npm` usage.
- scss: Variable `$npm_package_DIR_scss` (absolute path). The source *.scss-directory.
- target: Variable `$npm_package_DIR_target` (absolute path). Dir (normally your template folder) where the whole **content** of folder `$npm_package_DIR_dist` will be transfered to.
- project: Variable `$npm_package_DIR_project` (absolute path). Local dir of the project.
- work: Variable `$npm_package_DIR_work` (relative path). Temporary local work directory inside active/relevant project folder `$npm_package_DIR_project`.
- css: Variable `$npm_package_DIR_css` (relative path). In the beginning a work dir inside folder `$npm_package_DIR_work`. At the end a folder inside `$npm_package_DIR_dist` where all compiled, prefixed, minified CSS/MAP files are located.
- raw: Variable `$npm_package_DIR_raw` (relative path). In the beginning a work dir inside folder `$npm_package_DIR_work`. At the end a folder inside `$npm_package_DIR_dist` where all compiled, minified **BUT NOT PREFIXED** CSS files are located.
- dist:  Variable `$npm_package_DIR_dist` (relative path). Final source folder for transfer to `$npm_package_DIR_target` and for the FTP transfer. The whole **content** of this folder will be transfered. Not the folder itself.

#### g-help
- Displays an overview of (nearly all) possible `npm run [SCRIPTKEY]` commands.

#### npm run ghs-help-real-paths
- Like `ghs-help` but replaces path variables with values like configured in `DIR` block in `package.json`.

#### npm run ghs-npm-update-check
- Check for updates for packages in `package.json`. Prints a list, not more.

#### npm run ghs-ncu-override-json
- Check for updates for packages in `package.json`. AND override `package.json` file (newest stable versions). Don't forget to run npm install!

#### npm run ghs-watch
- Starts a `nodemon` watcher for changes in scss directory `$npm_package_DIR_scss` that starts a complete, new compilation via `npm run ghs-all` when a scss file is changed. Also starts a complete, new compilation if the watcher is started.

#### npm run ghs-watch-upload
- Like `ghs-watch` **plus FTP-Upload**. NEEDS A CORRECTLY CONFIGURED `ftp-credentials.json`! Check twice and test before using it.

#### npm run ghs-all
- Runs a complete job **without FTP upload**: `ghs-rm ghs-mkdir ghs-compile ghs-copy-raw ghs-prefix ghs-minify ghs-produktiv ghs-ftp`

#### npm run ghs-all-upload
- Like `ghs-all` **plus FTP upload**. NEEDS A CORRECTLY CONFIGURED `ftp-credentials.json`! Check twice and test before using it.

#### npm run ghs-all-local
- Nearly like `ghs-all` but **only files creation in local work dir** `$npm_package_DIR_work` and subfolders. No transfer to `$npm_package_DIR_target/*`. No FTP upload.

#### npm run ghs-rm
- Deletes **local** work directory `$npm_package_DIR_work` completely.

#### npm run ghs-mkdir
- Creates **local** work directories `$npm_package_DIR_work/$npm_package_DIR_raw`.

#### npm run ghs-compile
- Compiles *.scss files from `$npm_package_DIR_scss` to *.css files in **local** work dir `$npm_package_DIR_work`.

#### npm run ghs-copy-raw
- Copies *.css and *.css.map to local dir `$npm_package_DIR_work/$npm_package_DIR_raw`.

#### npm run ghs-prefix
- Runs Autoprefixer (See file `.browserslistrc`). 
- Source: All *.css files in **local** work dir `$npm_package_DIR_work`. 
- Target: Replaces *.css files in same dir.

#### npm run ghs-minify
- Minifies all *.css files and adds *.min.css files in **local** `$npm_package_DIR_work` and `$npm_package_DIR_work/$npm_package_DIR_raw`.

#### npm run ghs-produktiv
- Runs several npm scripts that match `ghs-produktiv-*`.

#### npm run ghs-produktiv-mkdir
- Creates TARGET dirs `$npm_package_DIR_target/$npm_package_DIR_css` and `$npm_package_DIR_target/$npm_package_DIR_raw` and `version.txt` files (datetime). No harm if they already exist. Existing folders and files stay alive.

#### npm run ghs-produktiv-copy
- Copies all prefixed *.css and *.map to  TARGET dir `$npm_package_DIR_target/$npm_package_DIR_css`.

#### npm run ghs-produktiv-copyRaw
- Copies all NON-prefixed *.css and *.map to TARGET dir `$npm_package_DIR_target/$npm_package_DIR_raw`.

#### npm run ghs-ftp
- Runs several npm scripts that match `ghs-ftp-*`. to **prepare** **locally** the upload of files via FTP. **Runs no FTP upload.**

#### npm run ghs-ftp-mkdir
- Creates local dirs `$npm_package_DIR_work/$npm_package_DIR_dist/$npm_package_DIR_css` and `$npm_package_DIR_work/$npm_package_DIR_dist/$npm_package_DIR_raw` and subfolders with `version.txt` files (datetime). No harm if they already exist. Existing folders and files stay alive.

#### npm run ghs-ftp-copy
- Copies all prefixed *.css and *.map to local `$npm_package_DIR_work/$npm_package_DIR_dist/$npm_package_DIR_css`.

#### npm run ghs-ftp-copyRaw
- Copies all NON-prefixed *.css and *.map to local `$npm_package_DIR_work/$npm_package_DIR_dist/$npm_package_DIR_raw`.

#### npm run ghs-upload
- Runs the upload of all files/dirs via FTP inside dir `$npm_package_DIR_work/$npm_package_DIR_dist`. NEEDS A CORRECTLY CONFIGURED `ftp-credentials.json`! Check twice and test before using it.

#### FTP configuration (inside `$npm_package_DIR_project/ftp-credentials.json`)
- **No guarantees concerning security!**
- See also file `ftp-credentials-example.json`.
- place a comment here: Place one if you want to. No usage.
- connectionName: "Whatever" string. An information displayed in console when the FTP script starts.
- server: The FTP Server/Host.
- user: The FTP username.
- password: The password of user.
- remoteDir: The ftp directory. Starts and ends with a slash (`/`)! If it's the FTP ROOT of the current FTP connection just a single slash.
- ssl: **I have never tested with value `false`!**.
- passive: At least `true` on Windows is recommended because of firewall blockades.

##### package.json. `scripts` block.
 ```Array
(
    [g-help] => bin/help.php
    [g-help-real-paths] => bin/help.php -r
    [g-npm-update-check] => ncu
    [g-ncu-override-json] => ncu -u
    [g-watch] => nodemon --watch $npm_package_DIR_scss/ --ext scss --exec "npm run g-all"
    [g-watch-upload] => nodemon --watch $npm_package_DIR_scss/ --ext scss --exec "npm run g-all-upload"
    [g-all-local] => npm-run-all g-rm g-mkdirs g-compile g-copyRaw g-prefix g-minify g-version g-copyDist
    [g-all] => npm-run-all g-all-local g-copyTarget
    [g-all-upload] => npm-run-all g-all g-upload
    [g-rm] => cross-env-shell "shx rm -rf $npm_package_DIR_project/$npm_package_DIR_work"
    [g-mkdirs] => npm-run-all g-mk-*
    [g-mk-css] => cross-env-shell "shx mkdir -p $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_css"
    [g-mk-raw] => cross-env-shell "shx mkdir -p $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_raw"
    [g-mk-dist] => cross-env-shell "shx mkdir -p $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_dist"
    [g-compile] => node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 $npm_package_DIR_scss/ -o $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_css
    [g-copyRaw] => cross-env-shell shx cp $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_css/*.{css,map} $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_raw
    [g-prefix] => postcss --config build/postcss.config.js --replace "$npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_css/*.css" "!$npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_css/*.min.css"
    [g-minify] => bin/minify.php
    [g-version] => bin/writeVersion.php
    [g-copyDist] => cross-env-shell shx cp -rf $npm_package_DIR_project/$npm_package_DIR_work/{$npm_package_DIR_css,$npm_package_DIR_raw} $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_dist
    [g-copyTarget] => cross-env-shell shx cp -rf $npm_package_DIR_project/$npm_package_DIR_work/$npm_package_DIR_dist/* $npm_package_DIR_target
    [g-upload] => bin/FTPRecursiveFolderUpload.php
)
```

